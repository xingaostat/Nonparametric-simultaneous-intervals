

data(heart.data)
attach(heart.data)
fit.a <- glmpath(x, y, family=binomial)




starttime<-date()
library(MASS)
library(VGAM)
library(lars)
library(mvtnorm)
library(glmpath)
GKB<-function(bootsam,B,alpha){
p<-dim(bootsam)[2]
ranksam<-apply(bootsam,2,rank)

#upsam<-apply(ranksam,1,max)
#upsam<-apply(ranksam,1,max2)
upsam<-apply(ranksam,1,max)

upsam<-upsam+runif(B,-0.1,0.1)

rankup<-rank(upsam)

cut<-1-alpha/2

cutnum<-ceiling(B*(1-alpha/2))



below1<-(rankup<=cutnum)
below1<-below1==1

subsetA<-ranksam[below1,]

lowsam<-apply(subsetA,1,min)
lowsam<-lowsam+runif(length(lowsam),-0.1,0.1)
rankdown<-rank(lowsam)

cutnum1<-ceiling(length(lowsam)*(alpha)/(2-alpha))

below2<-(rankdown>=cutnum1)
below2<-below2==1

subsetB<-ranksam[below1,][below2,]

top<-apply(subsetB,2,max)

topnum<-numeric(p)
for(j in 1:p){
vec<-bootsam[,j]
topnum[j]<-vec[order(vec)[top[j]]]
}

bottom<-apply(subsetB,2,min)

botnum<-numeric(p)
for(j in 1:p){
vec<-bootsam[,j]
botnum[j]<-vec[order(vec)[bottom[j]]]
}

return(cbind(topnum,botnum))
}

MB<-function(bootsam,B,alpha){
p<-dim(bootsam)[2]
ranksam<-apply(bootsam,2,rank)

#upsam<-apply(ranksam,1,max)
#upsam<-apply(ranksam,1,max2)

upsam<-apply(ranksam,1,max)

upsam1<-upsam+runif(B,-0.1,0.1)


cutnum<-ceiling(B*(1-alpha/2))

l2<-order(upsam)[cutnum]
rb<-upsam[l2]

topnum<-numeric(p)
for(j in 1:p){
vec<-bootsam[,j]
topnum[j]<-sort(vec)[rb]
}


theta<-(-bootsam)

ranksam<-apply(theta,2,rank)

#upsam<-apply(ranksam,1,max)
#upsam<-apply(ranksam,1,max2)

upsam<-apply(ranksam,1,max)




cutnum<-ceiling(B*(1-alpha/2))

l2<-order(upsam)[cutnum]
rb<-upsam[l2]

botnum<-numeric(p)
for(j in 1:p){
vec<-theta[,j]
botnum[j]<--(sort(vec)[rb])
}

return(cbind(topnum,botnum))
}


PRC<-function(bootsam,B,alpha){
p<-dim(bootsam)[2]

cut<-1-alpha/2

cutnum<-ceiling(B*(1-alpha/2))

cutnum1<-floor(B*alpha/2)

topnum<-numeric(p)
for(j in 1:p){
vec<-bootsam[,j]
topnum[j]<-vec[order(vec)[cutnum]]
}


botnum<-numeric(p)
for(j in 1:p){
vec<-bootsam[,j]
botnum[j]<-vec[order(vec)[cutnum1]]
}

return(cbind(topnum,botnum))
}


#####next develop the function for MB interval#####




alpha<-0.05




##dim(heart)
## 172   8


n<-172
p<-9




bic<-fit.a$bic
loc<-which.min(bic)
est<-(fit.a$b.predictor[loc,])
est<-as.numeric(est)

Bnumer<-1000

B<-Bnumer
bootest<-array(dim=c(Bnumer,(p+1)))


bootindmat<-array(dim=c(Bnumer,n))


for (b in 1:Bnumer){
print(b)
bootind<-sample(1:n,replace=TRUE)
bootindmat[b,]<-bootind
bootx<-x[bootind,]
booty<-y[bootind]

fit.a<-glmpath(bootx, booty, family=binomial)
bic<-fit.a$bic
loc<-which.min(bic)
bootest[b,]<-as.numeric(fit.a$b.predictor[loc,])
}

res1<-MB(bootest,Bnumer,alpha)

res2<-GKB(bootest,Bnumer,alpha)

######check the SCI with no model selection step


###first compuate the smoothed estimate

smoothest<-apply(bootest,2,mean)





###next find the standard errors of the smoothest####
###first calculate Y_{bj}^*###

Ystar<-array(dim=c(Bnumer,n))

##bootindmat records who are in the resamples##
for (b in 1:Bnumer){
  for (j in 1:n){
Ystar[b,j]<-sum(bootindmat[b,]==j)
  }
}


covjl<-array(dim=c(n,(p+1)))
for (j in 1:n){
  for (l in 1:(p+1)){
   covjl[j,l]<-cov(Ystar[,j],bootest[,l])
  }
}

nosigma<-array(dim=c((p+1),(p+1)))
  for (l in 1:(p+1)){
   for (m in 1:(p+1)){
    nosigma[l,m]<-covjl[,l]%*%covjl[,m]
    }
  }  

std<-sqrt(diag(nosigma))  


###
library(mvtnorm)
dmat<-diag(1/std)
cormat<-dmat%*%nosigma%*%dmat
qnum<-qmvnorm(0.95,cor=cormat,tail="both.tails")
zcritical<-qnorm((1-0.05/(2*10)),0,1)
nontop1<-smoothest+std*qnum[[1]]
nonbot1<-smoothest-std*qnum[[1]]
res3<-cbind(nontop1,nonbot1)

bontop1<-smoothest+std*zcritical

bonbot1<-smoothest-std*zcritical

res4<-cbind(bontop1,bonbot1)

tot<-cbind(res1,res2,res3,res4)
for (i in 1:10){
cat(sprintf(" %.4f & %.4f & %.4f & %.4f & %.4f & %.4f & %.4f & %.4f \\\\ \n",tot[i,3],tot[i,4],tot[i,1],tot[i,2],tot[i,5],tot[i,6],tot[i,7],tot[i,8]))
}

          
 ####the following are the data analysis result (Table 2 of the paper)

 0.8804 & -6.9971 & 0.8999 & -7.4115 & -0.3777 & -6.0964 & -0.3514 & -6.1227 \\ 
 0.0156 & -0.0243 & 0.0156 & -0.0292 & 0.0092 & -0.0097 & 0.0093 & -0.0098 \\ 
 0.2374 & 0.0000 & 0.2374 & 0.0000 & 0.1921 & -0.0480 & 0.1932 & -0.0491 \\ 
 0.4703 & 0.0000 & 0.4703 & 0.0000 & 0.3693 & -0.1772 & 0.3718 & -0.1797 \\ 
 0.1543 & 0.0000 & 0.1846 & -0.0408 & 0.0595 & -0.0430 & 0.0599 & -0.0434 \\ 
 1.3744 & 0.0000 & 1.3994 & 0.0000 & 1.0511 & -0.5562 & 1.0585 & -0.5636 \\ 
 0.0929 & 0.0000 & 0.0929 & -0.0111 & 0.0453 & -0.0278 & 0.0456 & -0.0281 \\ 
 0.0000 & -0.2857 & 0.0000 & -0.3246 & 0.0873 & -0.1324 & 0.0884 & -0.1334 \\ 
 0.0272 & -0.0073 & 0.0272 & -0.0172 & 0.0154 & -0.0103 & 0.0155 & -0.0104 \\ 
 0.0920 & 0.0000 & 0.0920 & 0.0000 & 0.0853 & -0.0092 & 0.0857 & -0.0096 \\ 

 #####

#plotCI {plotrix}	R Documentation
#Plot confidence intervals/error bars for Figure 1 of the paper

par(mfrow=c(4, 1))



std1<-sqrt(apply(bootest,2,var))





plotCI((1:10),(est/std1), ((res2[,1]-est)/std1),((est-res2[,2])/std1),lwd=2,col="red",scol="blue", xlab="variables",ylab="confidence interval",ylim=c(-10,10))
abline(h=0,col=4,lty=2)
title("Modified MB method")

plotCI((1:10),(est/std1), ((res1[,1]-est)/std1),((est-res1[,2])/std1),lwd=2,col="red",scol="blue", xlab="variables",ylab="confidence interval",ylim=c(-10,10))
abline(h=0,col=4,lty=2)
title("MB method")

plotCI(1:10,smoothest/std,qnum[[1]],lwd=2,col="red",scol="blue", xlab="variables",ylab="confidence interval",ylim=c(-10,10))
abline(h=0,col=4,lty=2)
title("MVN NP Delta method")

plotCI(1:10,smoothest/std,zcritical,lwd=2,col="red",scol="blue", xlab="variables",ylab="confidence interval",ylim=c(-10,10))
abline(h=0,col=4,lty=2)
title("Bonferroni NP Delta method")


